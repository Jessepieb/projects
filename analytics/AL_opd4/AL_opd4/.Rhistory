<<<<<<< HEAD
library(readr)
sorting <- read_csv("C:/Users/Jesse/Desktop/test.csv")
View(sorting)
logn = log10(sorting$size)
mlogn = lm(sorting$duration - logn)
plot(logn)
mlogn = lm(sorting$duration ~ logn)
summary(mlogn)
nsq = sorting$size^2
mnsq = lm(sorting$duration ~ nsq)
summary(mnsq)
plot(logn,sorting$duration)
abline(mlogn)
plot(nsq, sorting$duration)
abline(mnsq)
rm(ls())
rm(ls(*))
ls()
rm(ls(1:5))
rm(ls("logn", "mlogn", "sorting", "nsq", "mnsq"))
rm("logn", "mlogn", "sorting", "nsq", "mnsq")
library(readr)
twts <- read_csv("C:/Users/Jesse/Downloads/twts.csv")
View(twts)
str(twts)
table(twts$Sentiment)
install.packages("tm")
library(tm)
install.packages("SnowballC")
library(SnowballC)
corupus = Corpus(VectorSource(twts$Tweet))
corpus
corpus = corupus
rm(corupus)
corpus
corpus[[1]]
corpus = tm_map(corpus, tolower)
corpus
str(corpus)
corpus = tm_map(corpus, tolower)
corpus = tm_map.SimpleCorpus(corpus, tolower)
corpus = tm_map(corpus, tolower)
View(corpus)
corpus = tm_map(corpus, removePunctuation)
View(corpus)
library(tm)
library(SnowballC)
#read data from csv file
twts = read.csv("C:/Users/Jesse/Downloads/twts.csv", stringsAsFactors = FALSE)
=======
setwd("D:/GitHub/projects/analytics/AL_opd4/AL_opd4")
getwd()
install.packages("caTools")
source('D:/GitHub/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R')
install.packages("tm")
source('D:/GitHub/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R')
install.packages("SnowballC")
source('D:/GitHub/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R')
install.packages("caTools")
library(tm)
library(SnowballC)
#read data from csv file
twts = read.csv("twts.csv", stringsAsFactors = FALSE)
>>>>>>> 02cf27680df4edddae9db3601e19e128b3d863df
#extract only the needed data
twts = subset(
twts,
select = c(Sentiment, Tweet) ,
subset = (Sentiment == 0 | Sentiment == 4)
)
#add new factor Negative (TRUE or FALSE)
twts$Negative = as.factor(twts$Sentiment < 2)
#load tweets into the Corpus format, making it easy to apply modifications to the provided text
corpus = Corpus(VectorSource(twts$Tweet))
#set all characters to lower
corpus = tm_map(corpus, tolower)
#remove all punctuation
corpus = tm_map(corpus, removePunctuation)
#remove all stop-words, these are not needed in our model
corpus = tm_map(corpus, removeWords, c(stopwords("english")))
#stem all words
corpus = tm_map(corpus, stemDocument)
#get frequencies of all the words in our corpus
frequencies = DocumentTermMatrix(corpus)
#remove rare words
sparse = removeSparseTerms(frequencies, 0.995)
#make sparse into a data frame
tweetSparse = as.data.frame(as.matrix(sparse))
#correcting names , words that start with numbers will be changed
colnames(tweetSparse) = make.names(colnames(tweetSparse))
#add independent variable
tweetSparse$Negative = twts$Negative
library(caTools)
#seed for pseudo random generator
set.seed(123)
#splitting the data
split = sample.split(tweetSparse$Negative, SplitRatio = 0.7)
#training set
trainsparse = subset(tweetSparse, split == TRUE)
#testing set
testsparse = subset(tweetSparse, split == FALSE)
library(rpart)
library(rpart.plot)
#create CART-Tree
tweetCART = rpart(trainsparse$Negative ~ ., data = trainsparse, method =
"class")
#plot Cart-Tree
prp(tweetCART)
#prediction from our model applied to our test-set
predictCart = predict(tweetCART, newdata = testsparse, type = "class")
predtable = table(testsparse$Negative, predictCart)
predtable
library(ROCR)
#create ROC prediction
pred = prediction(as.numeric(predictCart), as.numeric(testsparse$Negative))
#Calculate Area under the Curve
AUC = performance(pred, "auc")@y.values
AUC
perf = performance(pred, "tpr", "fpr")
#Plot the ROC_Curve
plot(perf,
colorize = TRUE,
print.cutoffs.at = seq(0, 3, 0.2))
#Addition of linear line
abline(0, 1)
<<<<<<< HEAD
source('C:/Users/Jesse/Desktop/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
setwd("D:/Github/projects/analytics/AL_opd4/AL_opd4")
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
AUC
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
View(twts)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/sentimentCart.R', echo=TRUE)
predtable
View(tweetCART)
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
predtable
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
predtable
source('D:/Github/projects/analytics/AL_opd4/AL_opd4/3Sentiment.R', echo=TRUE)
predtable
predtable = table(testsparse$Negative,predictCart,testsparse$Positive)
predtable = table(testsparse$Negative,predictCart)
predtable = table(testsparse$Negative,predictCart[,2])
predtable
predtable = table(testsparse$Negative,predictCart[,2]>0.5,predictCart[,3]>0.5)
predtable = table(testsparse$Negative,predictCart[,2]>0.5,predictCart[,2]<0.5)
predtable = table(testsparse$Negative,predictCart[,2]>0.5,predictCart[,2]<0.5)
predtable
predtable = table(testsparse$Negative,testsparse$Positive,predictCart[,2]>0.5)
predtable
predtable = table(predtable,predictCart[,2]>0.5)
predtable = table(predtable,predictCart[,2]<0.5)
predtable = table(c(testsparse$Negative,testsparse$Positive),predictCart[,2]>0.5)
View(predictCart)
predtable = table(c(testsparse$Negative,testsparse$Positive),c(predictCart[,2]>0.5))
predtable = table(testsparse$Negative,predictCart[,2]>0.5)
predtable
tweetCART = rpart(Negative ~ ., data= trainsparse, method = "class")
prp(tweetCART)
prp(tweetCART)
=======
>>>>>>> 02cf27680df4edddae9db3601e19e128b3d863df
